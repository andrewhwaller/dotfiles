#!/usr/bin/env bash
# Zotero headless service and GUI control script

set -euo pipefail

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Configuration
SERVICE_NAME="zotero-headless.service"
DOTFILES_DIR="${HOME}/dotfiles"
GUI_LAUNCH="${DOTFILES_DIR}/zotero/zotero-gui-launch.sh"
GUI_STATUS="${DOTFILES_DIR}/zotero/zotero-gui-status.sh"
GUI_STOP="${DOTFILES_DIR}/zotero/zotero-gui-stop.sh"

# Helper function to check if GUI script exists
check_gui_script() {
    local script="$1"
    if [ ! -x "$script" ]; then
        echo -e "${RED}GUI script not found or not executable: $script${NC}"
        exit 1
    fi
}

show_status() {
    echo -e "${BLUE}=== Zotero Service Status ===${NC}"
    systemctl --user status "$SERVICE_NAME"
}

view_logs() {
    echo -e "${BLUE}=== Zotero Service Logs (press Ctrl+C to exit) ===${NC}"
    journalctl --user -u "$SERVICE_NAME" -f
}

view_recent_logs() {
    echo -e "${BLUE}=== Recent Zotero Service Logs ===${NC}"
    journalctl --user -u "$SERVICE_NAME" -n 50 --no-pager
}

restart_service() {
    echo -e "${YELLOW}Restarting Zotero service...${NC}"
    systemctl --user restart "$SERVICE_NAME"
    sleep 2
    echo -e "${GREEN}Service restarted${NC}"
    show_status
}

stop_service() {
    echo -e "${YELLOW}Stopping Zotero service...${NC}"
    systemctl --user stop "$SERVICE_NAME"
    echo -e "${GREEN}Service stopped${NC}"
}

start_service() {
    echo -e "${YELLOW}Starting Zotero service...${NC}"
    systemctl --user start "$SERVICE_NAME"
    sleep 2
    echo -e "${GREEN}Service started${NC}"
    show_status
}

enable_service() {
    echo -e "${YELLOW}Enabling Zotero service for autostart...${NC}"
    systemctl --user enable "$SERVICE_NAME"
    loginctl enable-linger "$USER"
    echo -e "${GREEN}Service enabled${NC}"
}

disable_service() {
    echo -e "${YELLOW}Disabling Zotero service autostart...${NC}"
    systemctl --user disable "$SERVICE_NAME"
    echo -e "${GREEN}Service disabled${NC}"
}

check_processes() {
    echo -e "${BLUE}=== Zotero Processes ===${NC}"
    if ! ps aux | grep -i "[z]otero-bin"; then
        echo -e "${RED}No Zotero processes found${NC}"
    fi
}

gui_launch() {
    check_gui_script "$GUI_LAUNCH"
    echo -e "${YELLOW}Launching Zotero GUI session...${NC}"
    "$GUI_LAUNCH"
}

gui_status() {
    check_gui_script "$GUI_STATUS"
    "$GUI_STATUS"
}

gui_stop() {
    check_gui_script "$GUI_STOP"
    echo -e "${YELLOW}Stopping Zotero GUI session...${NC}"
    "$GUI_STOP"
}

show_help() {
    cat <<EOF
${GREEN}Zotero Control Manager${NC}

${BLUE}Headless Service Commands:${NC}
  status              Show service status
  start               Start the headless service
  stop                Stop the headless service
  restart             Restart the headless service
  logs                View live service logs
  recent              View recent service logs
  ps, processes       Check running Zotero processes
  enable              Enable autostart on boot
  disable             Disable autostart

${BLUE}GUI Mode Commands (VNC):${NC}
  gui, gui-launch     Launch GUI session with VNC
  gui-status          Check GUI session status
  gui-stop            Stop GUI session

${BLUE}Other:${NC}
  help, -h, --help    Show this help message

${YELLOW}Usage:${NC}
  zoteroctl              Run interactive menu
  zoteroctl <command>    Run specific command
EOF
}

show_menu() {
    echo ""
    echo -e "${GREEN}╔══════════════════════════════════════╗${NC}"
    echo -e "${GREEN}║      Zotero Control Manager          ║${NC}"
    echo -e "${GREEN}╚══════════════════════════════════════╝${NC}"
    echo ""
    echo -e "${BLUE}Headless Service:${NC}"
    echo "  1) Show status"
    echo "  2) Start service"
    echo "  3) Stop service"
    echo "  4) Restart service"
    echo "  5) View logs (live)"
    echo "  6) View recent logs"
    echo "  7) Check processes"
    echo "  8) Enable autostart"
    echo "  9) Disable autostart"
    echo ""
    echo -e "${BLUE}GUI Mode (VNC):${NC}"
    echo "  g) Launch GUI session"
    echo "  s) GUI session status"
    echo "  x) Stop GUI session"
    echo ""
    echo "  h) Help"
    echo "  q) Quit"
    echo ""
}

# Main loop
if [[ $# -gt 0 ]]; then
    # Non-interactive mode with argument
    case "$1" in
        status) show_status ;;
        start) start_service ;;
        stop) stop_service ;;
        restart) restart_service ;;
        logs) view_logs ;;
        recent) view_recent_logs ;;
        processes|ps) check_processes ;;
        enable) enable_service ;;
        disable) disable_service ;;
        gui-launch|gui) gui_launch ;;
        gui-status) gui_status ;;
        gui-stop) gui_stop ;;
        help|-h|--help) show_help ;;
        *)
            echo -e "${RED}Unknown command: $1${NC}"
            echo ""
            show_help
            exit 1
            ;;
    esac
else
    # Interactive mode
    while true; do
        show_menu
        read -p "Select an option: " choice
        echo ""

        case "$choice" in
            1) show_status ;;
            2) start_service ;;
            3) stop_service ;;
            4) restart_service ;;
            5) view_logs ;;
            6) view_recent_logs ;;
            7) check_processes ;;
            8) enable_service ;;
            9) disable_service ;;
            g|G) gui_launch ;;
            s|S) gui_status ;;
            x|X) gui_stop ;;
            h|H) show_help ;;
            q|Q)
                echo -e "${GREEN}Goodbye!${NC}"
                exit 0
                ;;
            *)
                echo -e "${RED}Invalid option. Please try again.${NC}"
                ;;
        esac

        # Don't pause after commands that have their own interactive output
        if [[ ! "$choice" =~ ^[5gG]$ ]]; then
            echo ""
            read -p "Press Enter to continue..."
        fi
    done
fi
