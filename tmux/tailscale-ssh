#!/usr/bin/env bash

# Detect OS and set appropriate Tailscale binary path
if [[ "$OSTYPE" == "darwin"* ]]; then
    TAILSCALE_BIN="/Applications/Tailscale.app/Contents/MacOS/Tailscale"
else
    # Linux and other systems - use tailscale from PATH
    TAILSCALE_BIN="tailscale"
fi

GREEN='\033[0;32m'
RESET='\033[0m'

get_hosts() {
    $TAILSCALE_BIN status --json | jq -r '.Peer // {} | to_entries[] | .value |
        [.HostName, .OS, (if .Online then "online" else "offline" end), .LastSeen] |
        @tsv' | awk -F'\t' '{
        hostname=$1
        os=$2
        online=$3
        lastseen=$4

        # Parse LastSeen timestamp
        if (lastseen == "0001-01-01T00:00:00Z" || lastseen == "") {
            display_time = online
        } else {
            cmd = "date -d \"" lastseen "\" +\"%b %d %H:%M\" 2>/dev/null || echo \"" online "\""
            cmd | getline display_time
            close(cmd)
        }

        printf "%-20s | %-15s | %-8s | %s\n", hostname, display_time, os, online
    }'
}

selected=$(get_hosts | fzf \
    --color=16 \
    --prompt=">> Liaison online, select host for transfer: " \
    --bind "shift-tab:up,tab:down" \
    --bind "change:top")

if [[ -z $selected ]]; then
    exit 0
fi

hostname=$(echo "$selected" | awk '{print $1}')

echo -ne "${GREEN}>> identity${RESET} [$USER]: "
read username

ssh_opts=()
if [[ -n $TMUX ]]; then
    ssh_opts+=(-o "SendEnv TMUX")
fi

if [[ -z $username ]]; then
    echo -e "${GREEN}>> establishing network link to $hostname...${RESET}"
    ssh "${ssh_opts[@]}" "$hostname"
else
    echo -e "${GREEN}>> establishing network link to $hostname as $username...${RESET}"
    ssh "${ssh_opts[@]}" "$username@$hostname"
fi
